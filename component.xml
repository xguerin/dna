<?xml version="1.0" encoding="UTF-8"?>

<component author="xavier.guerin@imag.fr" unique="true" wrapper="false">

  <id name="Arm9Processor" short_name="Arm9" version="1.0"/>

  <restrict>
    <id name="SoclibPlatform" version="1.0"/>
  </restrict>

  <provide>
    
    <!-- Endianness management -->

    <type name="cpu_context_t"/>

    <definition name="CPU_CONTEXT_SIZE"/>

    <method name="cpu_endian_is_big" return_type="">
      <argument name="width" type="int32_t" direction="in"/>
      <argument name="value" type="access" direction="inout"/>
    </method>

    <method name="cpu_endian_is_little" return_type="">
      <argument name="width" type="int32_t" direction="in"/>
      <argument name="value" type="access" direction="inout"/>
    </method>

    <method name="cpu_endian_concat" return_type="">
      <argument name="width" type="int32_t" direction="in"/>
      <argument name="result" type="access" direction="out"/>
      <argument name="low" type="access" direction="in"/>
      <argument name="high" type="access" direction="in"/>
    </method>

    <method name="cpu_endian_split" return_type="">
      <argument name="width" type="int32_t" direction="in"/>
      <argument name="value" type="access" direction="in"/>
      <argument name="low" type="access" direction="out"/>
      <argument name="high" type="access" direction="out"/>
    </method>

    <!-- Execution context management -->

    <method name="cpu_context_init" return_type="">
      <argument name="context" type="cpu_context_t" direction="out"/>
      <argument name="stack" type="access" direction="in"/>
      <argument name="size" type="int32_t" direction="in"/>
      <argument name="entry" type="access function" direction="in"/>
      <argument name="arguments" type="access generic" direction="in"/>
    </method>

    <method name="cpu_context_load" return_type="">
      <argument name="context" type="cpu_context_t" direction="in"/>
    </method>

    <method name="cpu_context_save" return_type="">
      <argument name="context" type="cpu_context_t" direction="out"/>
    </method>

    <method name="cpu_context_switch" return_type="">
      <argument name="from" type="cpu_context_t" direction="in"/>
      <argument name="to" type="cpu_context_t" direction="out"/>
    </method>

    <!-- I/O management -->
 
    <method name="cpu_read" return_type="">
      <argument name="size" type="int32_t" direction="in"/>
      <argument name="address" type="access" direction="in"/>
      <argument name="result" type="access" direction="out"/>
    </method>

    <method name="cpu_uncached_read" return_type="">
      <argument name="size" type="int32_t" direction="in"/>
      <argument name="address" type="access" direction="in"/>
      <argument name="result" type="access" direction="out"/>
    </method>

    <method name="cpu_vector_read" return_type="">
      <argument name="mode" type="vector_mode_t" direction="in"/>
      <argument name="from" type="access" direction="in"/>
      <argument name="to" type="access" direction="in"/>
      <argument name="size" type="int32_t" direction="in"/>
    </method>

   <method name="cpu_write" return_type="">
      <argument name="size" type="int32_t" direction="in"/>
      <argument name="address" type="access" direction="in"/>
      <argument name="value" type="access" direction="in"/>
    </method>

    <method name="cpu_uncached_write" return_type="">
      <argument name="size" type="int32_t" direction="in"/>
      <argument name="address" type="access" direction="in"/>
      <argument name="value" type="access" direction="in"/>
    </method>

    <method name="cpu_vector_write" return_type="">
      <argument name="mode" type="vector_mode_t" direction="in"/>
      <argument name="to" type="access" direction="in"/>
      <argument name="from" type="access" direction="in"/>
      <argument name="size" type="int32_t" direction="in"/>
    </method>

    <!-- Interrupt management -->

    <type name="interrupt_id_t"/>

    <type name="interrupt_status_t"/>

    <type name="interrupt_handler_t"/>

    <type name="exception_id_t"/>

    <type name="exception_handler_t"/>

    <definition name="CPU_N_IT"/>
 
    <method name="cpu_trap_attach_esr" return_type="">
      <argument name="id" type="exception_id_t" direction="in"/>
      <argument name="handler" type="exception_handler_t" direction="in"/>
    </method>

    <method name="cpu_trap_attach_isr" return_type="">
      <argument name="id" type="interrupt_id_t" direction="in"/>
      <argument name="handler" type="interrupt_handler_t" direction="in"/>
    </method>

    <method name="cpu_trap_mask_and_backup" return_type="interrupt_status_t"/>

    <method name="cpu_trap_restore" return_type="">
      <argument name="status" type="interrupt_status_t" direction="in"/>
    </method>

    <method name="cpu_trap_enable" return_type="">
      <argument name="id" type="interrupt_id_t" direction="in"/>
    </method>

    <method name="cpu_trap_disable" return_type="">
      <argument name="id" type="interrupt_id_t" direction="in"/>
    </method>

    <!-- Multiprocessor management -->

    <method name="cpu_mp_count" return_type="int32_t"/>

    <method name="cpu_mp_id" return_type="int32_t"/>

    <method name="cpu_mp_wait" return_type="">
      <argument name="sync" type="int32_t" direction="inout"/>
    </method>

    <method name="cpu_mp_proceed" return_type="">
      <argument name="sync" type="int32_t" direction="inout"/>
    </method>

    <!-- Synchronization management -->

    <method name="cpu_test_and_set" return_type="int32_t">
      <argument name="lock" type="int32_t" direction="inout"/>
    </method>

    <method name="cpu_compare_and_swap" return_type="int32_t">
      <argument name="lock" type="int32_t" direction="inout"/>
      <argument name="old" type="int32_t" direction="in"/>
      <argument name="new" type="int32_t" direction="in"/>
    </method>
  </provide>

  <require>
    <definition name="PLATFORM_ENDIANNESS"/>

    <method name="system_kickstart" return_type=""/>
  </require>

</component>
